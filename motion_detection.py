import numpy as np
import cv2

cap = cv2.VideoCapture('road_video.mp4')
# cap = cv2.VideoCapture(0) #use for webcam

#This creates a background object
#this function basically takes everything in motion as the foreground and everything else as background
# Parameters
# history	Length of the history.
# varThreshold	Threshold on the squared Mahalanobis distance between the pixel and the model.
# detectShadows	If true, the algorithm will detect shadows and mark them.
fgbg = cv2.createBackgroundSubtractorMOG2(history = 500, varThreshold = 200, detectShadows = False )
while True:
    _, frame = cap.read()
    fgmask = fgbg.apply(frame) #This applies the mask generated by the alg on the original video stream

    #by using MORPH_CLOSE we make the mask more seperated out so the contours are detected better
    kernel = np.ones((5,5), np.uint8)
    fgmask = cv2.morphologyEx(fgmask, cv2.MORPH_CLOSE, kernel)

    #contour is a curve joining all the continuous points (along the boundary), having same color or intensity
    #cv2.CHAIN_APPROX_SIMPLE approximates the contours instead of taking every point compared to cv2.CHAIN_APPROX_NONE
    contours, _ = cv2.findContours(fgmask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    min_area = 100.0
    for cnt in contours:
        if cv2.contourArea(cnt) > min_area:
            x,y,w,h = cv2.boundingRect(cnt)
             #we use -1 to fill the rectangle in the mask so there are no false positives(motion detection within a motion detected)
            fgmask = cv2.rectangle(fgmask, (x,y), (x+w, y+h), (255,255,255), -1)

    contours, _ = cv2.findContours(fgmask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    for cnt in contours:
        if cv2.contourArea(cnt) > min_area:
            x,y,w,h = cv2.boundingRect(cnt)
            frame = cv2.rectangle(frame, (x,y), (x+w, y+h), (0,255,255), 2)

    cv2.imshow('original', frame)
    cv2.imshow('fg', fgmask)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
